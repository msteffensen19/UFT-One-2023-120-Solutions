/***************************************************************
    *  DO NOT EDIT THIS FILE!
    *         
    *  This file is automatically generated by HP Service Test.
    *  Manually changing the contents of this file may result in 
    *  loss of information.
    *          
    *  To edit the test, open the file ‘AppC_FlightsServiceParameters.st’ 
    *  in HP Service Test.
     ***************************************************************/
    
    namespace Script
    {
    using System;
    using System.Text;
    using System.Threading;
    using System.Xml;
    using System.Xml.Schema;
    using HP.ST.Fwk.ReporterFWK;
    using HP.ST.Shared.Utilities;
    using HP.ST.Ext.BindingImpl.Getters;
    using HP.ST.Ext.BindingImpl.Setters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.PropInfo;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Getters;
    using HP.ST.Fwk.RunTimeFWK.BindingFWK.Setters;
    using HP.ST.Fwk.RunTimeFWK;
    using HP.ST.Fwk.RunTimeFWK.Utilities;
    using HP.ST.Fwk.RunTimeFWK.HelperClasses;
    using HP.ST.Fwk.RunTimeFWK.CompositeActivities;
    using HP.ST.Ext.BindingImpl.Setters.DataSourceSetters;
    using HP.ST.Fwk.JVMLoader;
    using System.IO;
    using System.Collections.Generic;
    using System.Reflection;
    using HP.ST.Fwk.SOAReplayAPI;
    using HP.ST.Fwk.UFTLicensing;
    
    
    
    public partial class WorkFlowScript : STWorkFlowScriptBase
    {    
    	TestUserCode _userCode = null;
    	TestEntities _flow = null;
    	static Reporter reporter;
    	int reportLevelInTree;
        HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator reportCreator;
    	
    	public BindDirection bind_dir51 = null;
        public BindDirection bind_dir52 = null;
        public BindDirection bind_dir53 = null;
        public BindDirection bind_dir54 = null;
        public BindDirection bind_dir55 = null;
        public BindDirection bind_dir56 = null;
        public BindDirection bind_dir57 = null;
        public BindDirection bind_dir58 = null;
        public BindDirection bind_dir59 = null;
        public BindDirection bind_dir60 = null;
        public BindDirection bind_dir61 = null;
        public BindDirection bind_dir62 = null;
        
        public IEnumerable<FeaturesGroup> LicensedFeatures
        {
        
        get
        {
        List<FeaturesGroup> features = new List<FeaturesGroup>();
        return features;
        
        }
        
        }
        
        public WorkFlowScript()
            : base(VuserClass.CommandLineArguments, new STRunTimeContext(), "test")
        {	
        	UpdateContextWithActionFolder(String.Empty);
        	
        }
        
        public WorkFlowScript(ISTRunTimeContext ctx)
            : base(VuserClass.CommandLineArguments, ctx, "test")
            
        {
        	this._context = ctx;
        	UpdateContextWithActionFolder(String.Empty);
        	UpdateTestSettings(ctx);
        }
        
        internal void InitializeComponent()
        {
        	LoadInput();
        	
        	InitReport();
        	
        	InitializeEncryptionManagerValues();
        
        	_userCode = new TestUserCode();
            _flow = _userCode;
            _flow.Context=this._context;
            
            
        
        	_flow.DataFetchActivity15 = new HP.ST.Ext.BasicActivities.DataFetchActivity(_context,"DataFetchActivity15");
            _flow.StartActivity1 = new HP.ST.Ext.BasicActivities.StartActivity(_context,"StartActivity1");
            _flow.DbOpenConnection8 = new HP.ST.Ext.DatabaseRunTime.DbOpenConnection(_context,"DbOpenConnection8");
            _flow.DbFetchData9 = new HP.ST.Ext.DatabaseRunTime.DbFetchData(_context,"DbFetchData9");
            _flow.DateIncActivity7 = new HP.ST.Ext.BasicActivities.DateIncActivity(_context,"DateIncActivity7");
            _flow.Loop2 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Loop<Loop2Input>(_context,"Loop2",LoopType.For);
            _flow.DataExporterActivity17 = new HP.ST.Ext.BasicActivities.DataExporterActivity(_context,"DataExporterActivity17");
            _flow.DataExporterCloseActivity18 = new HP.ST.Ext.BasicActivities.DataExporterCloseActivity(_context,"DataExporterCloseActivity18");
            _flow.EndActivity3 = new HP.ST.Ext.BasicActivities.EndActivity(_context,"EndActivity3");
            _flow.DataDisconnectActivity16 = new HP.ST.Ext.BasicActivities.DataDisconnectActivity(_context,"DataDisconnectActivity16");
            _flow.Sequence14 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.Sequence(_context,"Sequence14");
            _flow.StServiceCallActivity5 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity5");
            _flow.IfElse10 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElse<IfElse10Input>(_context,"IfElse10");
            _flow.IfElseBranch11 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch11");
            _flow.IfElseBranch12 = new HP.ST.Fwk.RunTimeFWK.CompositeActivities.IfElseBranch(_context,"IfElseBranch12");
            _flow.StServiceCallActivity6 = new HP.ST.Ext.WebServicesActivities.StServiceCallActivity(_context,"StServiceCallActivity6");
            _flow.ReportMessageActivity13 = new HP.ST.Ext.BasicActivities.ReportMessageActivity(_context,"ReportMessageActivity13");
            _flow.DataFetchActivity15.Comment = @"";
            _flow.DataFetchActivity15.IconPath = @"";
            _flow.DataFetchActivity15.AssemblyPath = @"AddIns\ServiceTest\BaseDataProviders\HP.ST.Ext.CustomDataProviders.dll";
            _flow.DataFetchActivity15.QueryClassName = @"HP.ST.Ext.CustomDataProviders.ExcelFileDataQuery";
            XmlDocument DataFetchActivity15_QueryParameters_Document = new XmlDocument();
            DataFetchActivity15_QueryParameters_Document.PreserveWhitespace = true;
            string xmlDataFetchActivity15Params = @"<Arguments><QueryParametersContainer><QueryParameter><Name>Id</Name><Value>992c6119-654f-4857-976b-ecd7013e5684</Value></QueryParameter><QueryParameter><Name>QueryName</Name><Value>FlightCities!Sheet1</Value></QueryParameter><QueryParameter><Name>IsEmbedded</Name><Value>True</Value></QueryParameter><QueryParameter><Name>Externalized</Name><Value>False</Value></QueryParameter><QueryParameter><Name>GroupText</Name><Value>FlightCities</Value></QueryParameter><QueryParameter><Name>FilePath</Name><Value>" + _context.ResourceManager.GetValue("{FlightCities!Sheet1.TablePath}") + "</Value></QueryParameter><QueryParameter><Name>SheetName</Name><Value>Sheet1$</Value></QueryParameter><QueryParameter><Name>ContainsHeadersRow</Name><Value>True</Value></QueryParameter></QueryParametersContainer></Arguments>";
            DataFetchActivity15_QueryParameters_Document.LoadXml(xmlDataFetchActivity15Params);
            _flow.DataFetchActivity15.QueryParameters = DataFetchActivity15_QueryParameters_Document;
            _flow.dataSourceNameToDataSource.Add("FlightCities!Sheet1", _flow.DataFetchActivity15);
            this.Activities.Add (_flow.DataFetchActivity15);
            _flow.StartActivity1.Comment = @"";
            _flow.StartActivity1.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.StartActivity1.Name = @"Start";
            _flow.StartActivity1.JVM = new HP.ST.Ext.BasicActivities.JVMProperties();
            _flow.StartActivity1.IsJavaUsed = false;
            _flow.StartActivity1.JVM.Classpath = @"%CLASSPATH%";
            _flow.StartActivity1.JVM.AdditionalVMParameters = @"";
            _flow.StartActivity1.JMS = new HP.ST.Ext.BasicActivities.JMSProperties();
            _flow.StartActivity1.IsJmsUsed = false;
            _flow.StartActivity1.JMS.JNDIContextFactory = @"<Select...>";
            _flow.StartActivity1.JMS.JNDIProviderUrl = @"";
            _flow.StartActivity1.JMS.JMSConnectionFactory = @"";
            _flow.StartActivity1.JMS.SecurityPrincipal = @"";
            _flow.StartActivity1.JMS.SecurityCredentials = @"";
            _flow.StartActivity1.JMS.JMSClientID = @"";
            _flow.StartActivity1.JMS.SSLPassword = @"";
            _flow.StartActivity1.JMS.SSLTrustedCertificate = @"";
            _flow.StartActivity1.JMS.SSLIdentity = @"";
            _flow.StartActivity1.JMS.ConnectionsPerProcess = @"1";
            _flow.StartActivity1.JMS.TimeoutOptions = @"DN_User_defined_Timeout";
            _flow.StartActivity1.JMS.UserTimeout = @"20";
            _flow.StartActivity1.JMS.GenerateAutoSelector = @"No";
            _flow.StartActivity1.KafkaSSL = new HP.ST.Fwk.KafkaFWK.KafkaSSLProperties();
            _flow.StartActivity1.IsKafkaUsed = false;
            _flow.StartActivity1.KafkaSSL.StrEnableSSL = @"No";
            _flow.StartActivity1.KafkaSSL.SSLCALocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientCertificateLocation = @"";
            _flow.StartActivity1.KafkaSSL.SSLClientKeyLocation = @"";
            _flow.StartActivity1.KafkaSASL = new HP.ST.Fwk.KafkaFWK.KafkaSASLProperties();
            _flow.StartActivity1.KafkaSASL.StrEnableSASL = @"No";
            _flow.StartActivity1.KafkaSASL.StrMechanism = @"GSSAPI";
            _flow.StartActivity1.KafkaSASL.StrServiceName = @"";
            this.Activities.Add (_flow.StartActivity1);
            _flow.DbOpenConnection8.ConnectionString = @"DSN=FlightsDB;";
            _flow.DbOpenConnection8.Password = @"";
            _flow.DbOpenConnection8.DatabaseType = HP.ST.Shared.Utilities.DB.DatabaseType.ODBC;
            _flow.DbOpenConnection8.Comment = @"";
            _flow.DbOpenConnection8.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_connect.png";
            _flow.DbOpenConnection8.Name = @"Connect to Flights DB";
            this.Activities.Add (_flow.DbOpenConnection8);
            _flow.DbFetchData9.QueryString = @"SELECT DISTINCT ""Flights"".""Departure"", ""Flights"".""Arrival"" FROM ""Flights"" ORDER BY ""Flights"".""Departure""";
            _flow.DbFetchData9.Timeout = (int)30;
            _flow.DbFetchData9.Comment = @"";
            _flow.DbFetchData9.IconPath = @"AddIns\ServiceTest\Database\toolbox_db_fetch_data.png";
            _flow.DbFetchData9.Name = @"Select Departure and Arrival Cities";
            VTDPropertyInfoBase pi112 = new VTDPropertyInfoBase("Connection");
            VTDBaseGetter binding_getter62 = new VTDObjectGetter(pi112);
            VTDPropertyInfoBase pi113 = new VTDPropertyInfoBase("Connection");
            VTDBaseSetter binding_setter51 = new VTDObjectSetter(pi113);
            bind_dir51 = new BindDirection(_flow.DbOpenConnection8,binding_getter62,binding_setter51,BindTargetType.ToInProperty);
            _flow.DbFetchData9.InDirections.Add(bind_dir51);
            XmlDocument DbFetchData9_ExpectedOutputProperties_Document = new XmlDocument();
            DbFetchData9_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            DbFetchData9_ExpectedOutputProperties_Document.LoadXml(
@"<tns:Arguments xmlns:tns=""hp.dbFetchActivity""><Count /><Result>true</Result><ResultMessage /><ResultTable><Row><Departure /><Arrival /></Row></ResultTable></tns:Arguments>");
            _flow.DbFetchData9.ExpectedOutputProperties = DbFetchData9_ExpectedOutputProperties_Document;
            this.Activities.Add (_flow.DbFetchData9);
            _flow.DateIncActivity7.OriginalDate =  new DateTime(1,1,1,0,0,0,0);
            _flow.DateIncActivity7.OriginalFormat = @"";
            _flow.DateIncActivity7.Units = @"Days";
            _flow.DateIncActivity7.Amount = (int)2;
            _flow.DateIncActivity7.Comment = @"";
            _flow.DateIncActivity7.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_dateinc.png";
            _flow.DateIncActivity7.Name = @"Increment Date 2 days into future";
            VTDPropertyInfoBase pi114 = new VTDPropertyInfoBase("CurrentDate");
            VTDBaseGetter binding_getter63 = new EnvironmentVariableGetter(pi114);
            VTDPropertyInfoBase pi115 = new VTDPropertyInfoBase("OriginalDate");
            VTDBaseSetter binding_setter52 = new VTDObjectSetter(pi115);
            bind_dir52 = new BindDirection(_flow.StartActivity1,binding_getter63,binding_setter52,BindTargetType.ToInProperty);
            _flow.DateIncActivity7.InDirections.Add(bind_dir52);
            this.Activities.Add (_flow.DateIncActivity7);
            _flow.Loop2.ConditionAsString = @"Run for 1 iteration";
            _flow.Loop2.NumberOfIterations = (int)1;
            _flow.Loop2.Comment = @"";
            _flow.Loop2.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_loop.png";
            _flow.Loop2.Name = @"Test Flow";
            VTDPropertyInfoBase pi116 = new VTDPropertyInfoBase("OutputProperties","count(/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'])");
            VTDBaseGetter binding_getter64 = new VTDXPathGetter(pi116);
            VTDPropertyInfoBase pi117 = new VTDPropertyInfoBase("NumberOfIterations");
            VTDBaseSetter binding_setter53 = new VTDObjectSetter(pi117);
            bind_dir53 = new BindDirection(_flow.DbFetchData9,binding_getter64,binding_setter53,BindTargetType.ToInProperty);
            _flow.Loop2.InDirections.Add(bind_dir53);
            _flow.Loop2.Activities.Add (_flow.Sequence14);
            this.Activities.Add (_flow.Loop2);
            _flow.DataExporterActivity17.Comment = @"";
            _flow.DataExporterActivity17.IconPath = @"";
            VTDPropertyInfoBase pi118 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter65 = new VTDObjectGetter(pi118);
            VTDPropertyInfoBase pi119 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter54 = new VTDObjectSetter(pi119);
            binding_setter54 = new StringFormaterDecorator(binding_setter54,"{Step.DataFetchActivity15.OutTable}");
            bind_dir54 = new BindDirection(_flow.DataFetchActivity15,binding_getter65,binding_setter54,BindTargetType.ToInProperty);
            _flow.DataExporterActivity17.InDirections.Add(bind_dir54);
            this.Activities.Add (_flow.DataExporterActivity17);
            _flow.DataExporterCloseActivity18.Comment = @"";
            _flow.DataExporterCloseActivity18.IconPath = @"";
            this.Activities.Add (_flow.DataExporterCloseActivity18);
            _flow.EndActivity3.Comment = @"";
            _flow.EndActivity3.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_code_activity.png";
            _flow.EndActivity3.Name = @"End";
            this.Activities.Add (_flow.EndActivity3);
            _flow.DataDisconnectActivity16.Comment = @"";
            _flow.DataDisconnectActivity16.IconPath = @"";
            VTDPropertyInfoBase pi120 = new VTDPropertyInfoBase("OutTable");
            VTDBaseGetter binding_getter66 = new VTDObjectGetter(pi120);
            VTDPropertyInfoBase pi121 = new VTDPropertyInfoBase("Data");
            VTDBaseSetter binding_setter55 = new VTDObjectSetter(pi121);
            binding_setter55 = new StringFormaterDecorator(binding_setter55,"{Step.DataFetchActivity15.OutTable}");
            bind_dir55 = new BindDirection(_flow.DataFetchActivity15,binding_getter66,binding_setter55,BindTargetType.ToInProperty);
            _flow.DataDisconnectActivity16.InDirections.Add(bind_dir55);
            this.Activities.Add (_flow.DataDisconnectActivity16);
            _flow.Sequence14.Comment = @"";
            _flow.Sequence14.IconPath = @"";
            _flow.Sequence14.Name = @"Sequence14";
            _flow.Sequence14.Activities.Add (_flow.StServiceCallActivity5);
            _flow.Sequence14.Activities.Add (_flow.IfElse10);
            XmlDocument StServiceCallActivity5_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity5_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity5_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><GetFlights xmlns=""HP.SOAQ.SampleApp""><DepartureCity>{Step.OutputProperties.DbFetchData9.ResultTable.Row[{Step.OutputProperties.Loop2.CurrentIterationNumber}].Departure}</DepartureCity><ArrivalCity>{Step.OutputProperties.DbFetchData9.ResultTable.Row[{Step.OutputProperties.Loop2.CurrentIterationNumber}].Arrival}</ArrivalCity><FlightDate>{Step.OutputProperties.DateIncActivity7.Result}</FlightDate></GetFlights></Body></Envelope>");
            _flow.StServiceCallActivity5.InputEnvelope = StServiceCallActivity5_InputEnvelope_Document;
            _flow.StServiceCallActivity5.Comment = @"";
            _flow.StServiceCallActivity5.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity5.Name = @"GetFlights";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress = _context.ResourceManager == null || String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity5.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/GetFlights";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity5.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity5.Service = @"Flights_Service";
            _flow.StServiceCallActivity5.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity5.Operation = @"GetFlights";
            _flow.StServiceCallActivity5.IsOneWay = false;
            _flow.StServiceCallActivity5.SendRequestToService=true;
            _flow.StServiceCallActivity5.FaultExpected=false;
            _flow.StServiceCallActivity5.IsAsync=false;
            _flow.StServiceCallActivity5.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity5.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity5_ChannelBindingXml = new XmlDocument();
            StServiceCallActivity5_ChannelBindingXml.PreserveWhitespace = true;
            StServiceCallActivity5_ChannelBindingXml.LoadXml(@"<?xml version=""1.0""?>
            <ArrayOfChannelBindingBase xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
              <ChannelBindingBase xsi:type=""HttpChannelBinding"">
                <IsKeepAlive>false</IsKeepAlive>
                <IsPreemptiveAuthentication>false</IsPreemptiveAuthentication>
                <ConnectionTimeout>0</ConnectionTimeout>
              </ChannelBindingBase>
            </ArrayOfChannelBindingBase>");
            _flow.StServiceCallActivity5.ChannelBindingXml = StServiceCallActivity5_ChannelBindingXml;
            VTDPropertyInfoBase pi122 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter67 = new VTDObjectGetter(pi122);
            VTDPropertyInfoBase pi123 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='FlightDate'][1]");
            VTDBaseSetter binding_setter56 = new VTDXPathSetter(pi123,XmlTypeCode.DateTime);
            bind_dir56 = new BindDirection(_flow.DateIncActivity7,binding_getter67,binding_setter56,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity5.InDirections.Add(bind_dir56);
            VTDPropertyInfoBase pi124 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter68 = new VTDObjectGetter(pi124);
            VTDPropertyInfoBase pi125 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Departure'][1]");
            VTDBaseGetter binding_getter69 = new VTDXPathGetter(pi125,XmlTypeCode.String);
            binding_getter69 = new XPathGetterDecorator(binding_getter69,"{Array0}",binding_getter68,_flow.Loop2);
            VTDPropertyInfoBase pi126 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='DepartureCity'][1]");
            VTDBaseSetter binding_setter57 = new VTDXPathSetter(pi126,XmlTypeCode.String);
            binding_setter57 = new StringFormaterDecorator(binding_setter57,"{Step.OutputProperties.DbFetchData9.ResultTable.Row[{Step.OutputProperties.Loop2.CurrentIterationNumber}].Departure}");
            bind_dir57 = new BindDirection(_flow.DbFetchData9,binding_getter69,binding_setter57,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity5.InDirections.Add(bind_dir57);
            VTDPropertyInfoBase pi127 = new VTDPropertyInfoBase("CurrentIterationNumber");
            VTDBaseGetter binding_getter70 = new VTDObjectGetter(pi127);
            VTDPropertyInfoBase pi128 = new VTDPropertyInfoBase("OutputProperties","/*[local-name(.)='Arguments'][1]/*[local-name(.)='ResultTable'][1]/*[local-name(.)='Row'][{Array0}]/*[local-name(.)='Arrival'][1]");
            VTDBaseGetter binding_getter71 = new VTDXPathGetter(pi128,XmlTypeCode.String);
            binding_getter71 = new XPathGetterDecorator(binding_getter71,"{Array0}",binding_getter70,_flow.Loop2);
            VTDPropertyInfoBase pi129 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='ArrivalCity'][1]");
            VTDBaseSetter binding_setter58 = new VTDXPathSetter(pi129,XmlTypeCode.String);
            binding_setter58 = new StringFormaterDecorator(binding_setter58,"{Step.OutputProperties.DbFetchData9.ResultTable.Row[{Step.OutputProperties.Loop2.CurrentIterationNumber}].Arrival}");
            bind_dir58 = new BindDirection(_flow.DbFetchData9,binding_getter71,binding_setter58,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity5.InDirections.Add(bind_dir58);
            XmlDocument StServiceCallActivity5_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity5_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity5_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity5.ExpectedOutputAttachments = StServiceCallActivity5_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity5_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity5_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity5_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity5.ExpectedFaultProperties = StServiceCallActivity5_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity5_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity5_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity5_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><GetFlightsResponse xmlns=""HP.SOAQ.SampleApp""><GetFlightsResult><Flight><Airline p1:nil=""true"" /><ArrivalCity p1:nil=""true"" /><ArrivalTime p1:nil=""true"" /><DepartureCity p1:nil=""true"" /><DepartureTime p1:nil=""true"" /><FlightNumber /></Flight><Flight><Airline p1:nil=""true"" /><ArrivalCity p1:nil=""true"" /><ArrivalTime p1:nil=""true"" /><DepartureCity p1:nil=""true"" /><DepartureTime p1:nil=""true"" /></Flight></GetFlightsResult></GetFlightsResponse></Body></Envelope>");
            _flow.StServiceCallActivity5.ExpectedOutputProperties = StServiceCallActivity5_ExpectedOutputProperties_Document;
            set_StServiceCallActivity5_checkpoints(_flow.StServiceCallActivity5);
            _flow.IfElse10.ConditionAsString = @"{Step.OutputProperties.StServiceCallActivity5.Body.GetFlightsResponse.GetFlightsResult.Flight[1].FlightNumber} GreaterThan 0";
            _flow.IfElse10.Comment = @"";
            _flow.IfElse10.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_if_else.png";
            _flow.IfElse10.Name = @"If  No Flight Available";
            _flow.IfElse10.Activities.Add (_flow.IfElseBranch11);
            _flow.IfElse10.Activities.Add (_flow.IfElseBranch12);
            _flow.IfElseBranch11.Condition += delegate(object sender,EventArgs e)
            {
            	try
            	{
            VTDPropertyInfoBase pi130 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightsResponse'][1]/*[local-name(.)='GetFlightsResult'][1]/*[local-name(.)='Flight'][{Array0}]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseGetter binding_getter72 = new VTDXPathGetter(pi130,XmlTypeCode.Int);
            binding_getter72 = new XPathGetterDecorator(binding_getter72,"{Array0}",1);
            		System.Int32 expr00 = (System.Int32)HP.ST.Fwk.RunTimeFWK.Utilities.Utils.ConvertValue(_flow.StServiceCallActivity5.GetParam(binding_getter72),typeof(System.Int32));
            		var result0 = expr00;
            		System.Int32 result1 = (System.Int32)(0);
            		return (result0 > result1);
            	}
            	catch(Exception exp)
            	{
            		if (exp is System.InvalidCastException)
            		{
            			throw;
            		}
            		else
            		{
            			return false;
            		}
            	};
            };
            _flow.IfElseBranch11.Comment = @"";
            _flow.IfElseBranch11.IconPath = @"";
            _flow.IfElseBranch11.Name = @"Yes";
            _flow.IfElseBranch11.Activities.Add (_flow.StServiceCallActivity6);
            _flow.IfElseBranch12.Condition += delegate(object sender,EventArgs e)
            {
            return true;
            };
            _flow.IfElseBranch12.Comment = @"";
            _flow.IfElseBranch12.IconPath = @"";
            _flow.IfElseBranch12.Name = @"No";
            _flow.IfElseBranch12.Activities.Add (_flow.ReportMessageActivity13);
            XmlDocument StServiceCallActivity6_InputEnvelope_Document = new XmlDocument();
            StServiceCallActivity6_InputEnvelope_Document.PreserveWhitespace = true;
            StServiceCallActivity6_InputEnvelope_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/"" xmlns:p1=""http://www.w3.org/2001/XMLSchema-instance""><Body><CreateFlightOrder xmlns=""HP.SOAQ.SampleApp""><FlightOrder><Class>Business</Class><CustomerName>John Jackson</CustomerName><DepartureDate>{Step.OutputProperties.DateIncActivity7.Result}</DepartureDate><FlightNumber>{Step.OutputProperties.StServiceCallActivity5.Body.GetFlightsResponse.GetFlightsResult.Flight[1].FlightNumber}</FlightNumber><NumberOfTickets>2</NumberOfTickets></FlightOrder></CreateFlightOrder></Body></Envelope>");
            _flow.StServiceCallActivity6.InputEnvelope = StServiceCallActivity6_InputEnvelope_Document;
            _flow.StServiceCallActivity6.Comment = @"";
            _flow.StServiceCallActivity6.IconPath = @"AddIns\ServiceTest\WSImportTechnology\ictb_service_operations_16.png";
            _flow.StServiceCallActivity6.Name = @"CreateFlightOrder";
            _flow.StServiceCallActivity6.TransportProtocol.SOAPProperties.EndpointAddress = _context.ResourceManager == null || String.IsNullOrEmpty(_context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity6.TransportProtocol.SOAPProperties.EndpointAddress}")) ? @"http://localhost:8000/Flights_SOAP" : _context.ResourceManager.GetValue(@"{Step.GeneralProperties.StServiceCallActivity6.TransportProtocol.SOAPProperties.EndpointAddress}");
            _flow.StServiceCallActivity6.TransportProtocol.SOAPProperties.SoapAction = @"HP.SOAQ.SampleApp/IFlightsSoapService/CreateFlightOrder";
            _flow.StServiceCallActivity6.TransportProtocol.SOAPProperties.ContentType = @"text/xml; charset=utf-8";
            _flow.StServiceCallActivity6.TransportProtocol.SOAPProperties.Timeout = (int)100000;
            _flow.StServiceCallActivity6.Service = @"Flights_Service";
            _flow.StServiceCallActivity6.Port = @"FlightsServiceMethods";
            _flow.StServiceCallActivity6.Operation = @"CreateFlightOrder";
            _flow.StServiceCallActivity6.IsOneWay = false;
            _flow.StServiceCallActivity6.SendRequestToService=true;
            _flow.StServiceCallActivity6.FaultExpected=false;
            _flow.StServiceCallActivity6.IsAsync=false;
            _flow.StServiceCallActivity6.TargetNamespace=@"http://tempuri.org/";
            _flow.StServiceCallActivity6.ListenOnPort = (int)0;
            XmlDocument StServiceCallActivity6_ChannelBindingXml = new XmlDocument();
            StServiceCallActivity6_ChannelBindingXml.PreserveWhitespace = true;
            StServiceCallActivity6_ChannelBindingXml.LoadXml(@"<?xml version=""1.0""?>
            <ArrayOfChannelBindingBase xmlns:xsi=""http://www.w3.org/2001/XMLSchema-instance"" xmlns:xsd=""http://www.w3.org/2001/XMLSchema"">
              <ChannelBindingBase xsi:type=""HttpChannelBinding"">
                <IsKeepAlive>false</IsKeepAlive>
                <IsPreemptiveAuthentication>false</IsPreemptiveAuthentication>
                <ConnectionTimeout>0</ConnectionTimeout>
              </ChannelBindingBase>
            </ArrayOfChannelBindingBase>");
            _flow.StServiceCallActivity6.ChannelBindingXml = StServiceCallActivity6_ChannelBindingXml;
            VTDPropertyInfoBase pi131 = new VTDPropertyInfoBase("OutputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlightsResponse'][1]/*[local-name(.)='GetFlightsResult'][1]/*[local-name(.)='Flight'][{Array0}]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseGetter binding_getter73 = new VTDXPathGetter(pi131,XmlTypeCode.Int);
            binding_getter73 = new XPathGetterDecorator(binding_getter73,"{Array0}",1);
            VTDPropertyInfoBase pi132 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='FlightNumber'][1]");
            VTDBaseSetter binding_setter59 = new VTDXPathSetter(pi132,XmlTypeCode.Int);
            bind_dir59 = new BindDirection(_flow.StServiceCallActivity5,binding_getter73,binding_setter59,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity6.InDirections.Add(bind_dir59);
            VTDPropertyInfoBase pi133 = new VTDPropertyInfoBase("Result");
            VTDBaseGetter binding_getter74 = new VTDObjectGetter(pi133);
            VTDPropertyInfoBase pi134 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='CreateFlightOrder'][1]/*[local-name(.)='FlightOrder'][1]/*[local-name(.)='DepartureDate'][1]");
            VTDBaseSetter binding_setter60 = new VTDXPathSetter(pi134,XmlTypeCode.DateTime);
            bind_dir60 = new BindDirection(_flow.DateIncActivity7,binding_getter74,binding_setter60,BindTargetType.ToInProperty);
            _flow.StServiceCallActivity6.InDirections.Add(bind_dir60);
            XmlDocument StServiceCallActivity6_ExpectedOutputAttachments_Document = new XmlDocument();
            StServiceCallActivity6_ExpectedOutputAttachments_Document.PreserveWhitespace = true;
            StServiceCallActivity6_ExpectedOutputAttachments_Document.LoadXml(
@"<OutputAttachments />");
            _flow.StServiceCallActivity6.ExpectedOutputAttachments = StServiceCallActivity6_ExpectedOutputAttachments_Document;
            XmlDocument StServiceCallActivity6_ExpectedFaultProperties_Document = new XmlDocument();
            StServiceCallActivity6_ExpectedFaultProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity6_ExpectedFaultProperties_Document.LoadXml(
@"<tns:Envelope xmlns:tns=""http://schemas.xmlsoap.org/soap/envelope/""><tns:Body><tns:Fault><faultcode /><faultstring /></tns:Fault></tns:Body></tns:Envelope>");
            _flow.StServiceCallActivity6.ExpectedFaultProperties = StServiceCallActivity6_ExpectedFaultProperties_Document;
            XmlDocument StServiceCallActivity6_ExpectedOutputProperties_Document = new XmlDocument();
            StServiceCallActivity6_ExpectedOutputProperties_Document.PreserveWhitespace = true;
            StServiceCallActivity6_ExpectedOutputProperties_Document.LoadXml(
@"<Envelope xmlns=""http://schemas.xmlsoap.org/soap/envelope/""><Body><CreateFlightOrderResponse xmlns=""HP.SOAQ.SampleApp"" /></Body></Envelope>");
            _flow.StServiceCallActivity6.ExpectedOutputProperties = StServiceCallActivity6_ExpectedOutputProperties_Document;
            set_StServiceCallActivity6_checkpoints(_flow.StServiceCallActivity6);
            _flow.ReportMessageActivity13.Status = @"Fail";
            _flow.ReportMessageActivity13.Message = @"No available flight from {Step.InputProperties.StServiceCallActivity5.Body.GetFlights.DepartureCity} to {Step.InputProperties.StServiceCallActivity5.Body.GetFlights.ArrivalCity}";
            _flow.ReportMessageActivity13.Destination = @"ReportAndOutput";
            _flow.ReportMessageActivity13.Comment = @"";
            _flow.ReportMessageActivity13.IconPath = @"AddIns\ServiceTest\BasicActivities\toolbox_report_message.png";
            _flow.ReportMessageActivity13.Name = @"Report No Flight Available";
            VTDPropertyInfoBase pi135 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='DepartureCity'][1]");
            VTDBaseGetter binding_getter75 = new VTDXPathGetter(pi135,XmlTypeCode.String);
            VTDPropertyInfoBase pi136 = new VTDPropertyInfoBase("Message");
            VTDBaseSetter binding_setter61 = new VTDObjectSetter(pi136);
            binding_setter61 = new StringFormaterDecorator(binding_setter61,"{Step.InputProperties.StServiceCallActivity5.Body.GetFlights.DepartureCity}");
            bind_dir61 = new BindDirection(_flow.StServiceCallActivity5,binding_getter75,binding_setter61,BindTargetType.ToInProperty);
            _flow.ReportMessageActivity13.InDirections.Add(bind_dir61);
            VTDPropertyInfoBase pi137 = new VTDPropertyInfoBase("InputEnvelope","/*[local-name(.)='Envelope'][1]/*[local-name(.)='Body'][1]/*[local-name(.)='GetFlights'][1]/*[local-name(.)='ArrivalCity'][1]");
            VTDBaseGetter binding_getter76 = new VTDXPathGetter(pi137,XmlTypeCode.String);
            VTDPropertyInfoBase pi138 = new VTDPropertyInfoBase("Message");
            VTDBaseSetter binding_setter62 = new VTDObjectSetter(pi138);
            binding_setter62 = new StringFormaterDecorator(binding_setter62,"{Step.InputProperties.StServiceCallActivity5.Body.GetFlights.ArrivalCity}");
            bind_dir62 = new BindDirection(_flow.StServiceCallActivity5,binding_getter76,binding_setter62,BindTargetType.ToInProperty);
            _flow.ReportMessageActivity13.InDirections.Add(bind_dir62);
            
        }
        
        internal void InitializeEncryptionManagerValues()
        {
        
        }
        	
    	bool useReport = true;
    
    	protected override STExecutionResult ExecuteStep()
        {
            return base.ExecuteStep();
        }
    
        public void Start()
        {
    	    try
    		{
    		  Workflow_Executing();
    		  this.ExecuteStep();
    		}
    		finally
    		{
    		  WorkFlowScript_Completed();
    		}
        }
    
    	private void InitReport()
    	{
    		if (useReport)
    		{	
    			// Intialize Reporter
    			string reportDBDir = Path.Combine(this._context.ReportDirectory, @"Report");
    			CleanupReport(reportDBDir);        	
    			string reportDBPath = Path.Combine(reportDBDir, "VTDReport.mdb");        	
    			if (reporter == null)
    			{
    				reporter = new Reporter(reportDBPath);
    			}
    			_context.Reporter = reporter;
    		}
    	}
    
        public static void CopyDirectory(string Src, string Dst)
        {
            String[] Files;
    
            if (Dst[Dst.Length - 1] != Path.DirectorySeparatorChar)
                Dst += Path.DirectorySeparatorChar;
            if (!Directory.Exists(Dst)) Directory.CreateDirectory(Dst);
            Files = Directory.GetFileSystemEntries(Src);
            foreach (string Element in Files)
            {
                // Sub directories
                if (Directory.Exists(Element))
                    CopyDirectory(Element, Dst + Path.GetFileName(Element));
                // Files in directory
                else
                    File.Copy(Element, Dst + Path.GetFileName(Element), true);
            }
        }
        
        private void CleanupReport(string reportDBDir)
        {   
    		if (useReport)
    		{             
    			string reportTemplateDir = Path.Combine(ServiceTestRunner.GetInstallPath(), "bin", "ReportResources");
    			try
    			{
            		CopyDirectory(reportTemplateDir, reportDBDir);
    			}
    			catch //(Exception ex)
    			{
    				//ToDo: LoggingService.Warn("Report Cleanup Error", ex);
    			}
    		}
        }
    
        void Workflow_Executing()
        {   
        	InitReportNode();
                       
        }
    
    	private void InitReportNode()
    	{
    		if (useReport)
    		{	
        		// Init report creator
    			this.reportCreator = new HP.ST.Fwk.ReportCreator.QTPEngine.QTPEngineReportCreator();
    			this.reportLevelInTree = reportCreator.Init(_context.EnvironmentProfile.GetVariableValue("TestName"), _context);
                
    			STActivityBase activity = this;
    			string workflowID = activity.GetHashCode().ToString();
    			ReportNodeCreationData newNodeData =
    			new ReportNodeCreationData(workflowID, workflowID, DateTime.Now);
    			reporter.CreateReportNode(newNodeData);
            
    			ReportInfoData newReportData = new ReportInfoData(workflowID, ReportKeywords.TypeKeywordTag, this.GetType().ToString());
    			reporter.SendReportData(newReportData);
    			newReportData = new ReportInfoData(workflowID, ReportKeywords.NameKeywordTag, this.Name);
    			//TrackData(ReportInfoData.InfoDataTag, newReportData);
    			reporter.SendReportData(newReportData);            
            }
    	}
        
        void WorkFlowScript_Completed()
        {   
    		
    
    		CreateReportFiles();
    					
        	// Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
    
    		OnExecutionCompleted();
    		
        }
    
    	private void CreateReportFiles()
    	{
    		if (useReport)
    		{	
    			//Dispose reporter inorder to close connection to report DB
           		this._context.Reporter.Dispose();
            	
           		// Run report creator
    			reportCreator.RunOnDBAndCreateFiles();
    		}
    	}
    
        
        void Workflow_Faulting()
        {
    		
    
    		CreateReportFiles();
            // Write all snapshots to disk
    		this._context.SnapshotManager.WriteSnapshotsToDisk();
           
    		OnExecutionCompleted();
        }
    
    	protected override QcSystemVariables GetRuntimeQcVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeQcVariables(this._context);
    	}
            
    	protected override TestSystemVariables GetTestSystemVariables(ISTRunTimeContext context)
    	{
    		return new HP.ST.Ext.BasicActivities.RuntimeTestVariables(this._context);
    	}
    
    	private void UpdateTestSettings(ISTRunTimeContext ctx)
        {
    		ctx.PropertyBag["StopTestOnStepFailure"] = true;
    	}
    }
    
    public partial class VuserClass
    {
    	public static string[] CommandLineArguments;
    	public static string[] DotNetResolverPaths;
    	
        public VuserClass()
        {
    				
    		AssemblyResolver.AddSTPathsToResolutionPaths();
    		AssemblyResolver.AttachToAppdomain();
        }
    
        private void AddAssemblyResolver()
        {
    		AssemblyResolver.AddTestPathToResolutionPaths(GetTestPath());
    		AssemblyResolver.AddPathsForAssemblyResolution(DotNetResolverPaths);
        }
    	
        public int STAction()
        {	
            AddAssemblyResolver();
            STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
            WorkFlowScript script = new WorkFlowScript(ctx);
            script.InitializeComponent();
            script.Start();       
            
            return 0;
        }
        
        public void NotifyLicenseException(string msg)
        {
        		
    		try
    		{
    		    STRunTimeContext ctx = new STRunTimeContext(Directory.GetParent(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location)).FullName, string.Empty);
                WorkFlowScript script = new WorkFlowScript(ctx);
                script.InitializeComponent();
                script.Context.ReplayClient.OnLicenseFailure(msg);
                
            }
            catch (Exception)
            {
    			// ToDo: log the error message
            }        
        }
    
    	 protected string GetTestPath()
            {
                if (CommandLineArguments != null)
                {
                    for (int i = 0; i < CommandLineArguments.Length; i++)
                    {
                        if (CommandLineArguments[i].Equals("-test", StringComparison.OrdinalIgnoreCase))
                        {
                            return CommandLineArguments[i + 1];
                        }
                    }
                }
                return String.Empty;
            }
        
    }
    
    }
    